{"version":3,"sources":["Components/Counter/Counter.module.css","Components/SetCounter/SetCounter.module.css","Components/Input/InputComp.module.css","Components/Button/ButtonComp.tsx","Components/Counter/Counter.tsx","Components/Input/InputComp.tsx","Components/SetCounter/SetCounter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","className","callback","disabled","restProps","onClick","Counter","value","initValue","increment","maxValue","reset","error","setIsCounter","style","counter_content","counter_maxValue","counter_display","counter_error","counter_buttons","counter_buttonInc","counter_buttonRes","counter_buttonSet","Input","type","label","inputValue","setValue","errorText","finalInputClassName","errorInput","min","max","onInput","e","SetCounter","initVal","maxVal","disable","setMaxHandler","setInitHandler","errorCode","setCounter_content","setCounter_inputs","setCounter_input","setCounter_button","App","useState","MaxValue","setMaxValue","InitValue","setInitValue","counterValue","setCounterValue","isCounter","setError","setErrorCode","useEffect","errMessage","errCode","localStorage","getItem","init","switchButtonHandler","setMaxVal","val","setItem","setInitVal","currentTarget","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29756b0d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_content\":\"Counter_counter_content__JUyYR\",\"counter_display\":\"Counter_counter_display__NDa73\",\"counter_maxValue\":\"Counter_counter_maxValue__3j4WP\",\"counter_error\":\"Counter_counter_error__1lWka\",\"counter_buttons\":\"Counter_counter_buttons__29RCw\",\"counter_buttonInc\":\"Counter_counter_buttonInc__2gWk_\",\"counter_buttonRes\":\"Counter_counter_buttonRes__XvDr5\",\"counter_buttonSet\":\"Counter_counter_buttonSet__2wCKD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"setCounter_content\":\"SetCounter_setCounter_content__rh-wd\",\"setCounter_input\":\"SetCounter_setCounter_input__2AWaG\",\"errorInput\":\"SetCounter_errorInput__3Iwkh\",\"setCounter_button\":\"SetCounter_setCounter_button__2Flm2\",\"setCounter_inputs\":\"SetCounter_setCounter_inputs__dDOrh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"InputComp_Input__8sgSv\",\"label\":\"InputComp_label__d6T3-\",\"errorInput\":\"InputComp_errorInput__242Do\",\"error\":\"InputComp_error__2D-X8\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\"\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\ntype ButtonPropsType = DefaultButtonPropsType & {\r\n    callback: () => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (\r\n    {\r\n        className,\r\n        callback,\r\n        disabled,\r\n        ...restProps\r\n\r\n    }\r\n) => {\r\n    return (\r\n        <button\r\n            className={className}\r\n            onClick={()=>callback()}\r\n            disabled={disabled}\r\n            {...restProps}\r\n\r\n        />\r\n    )\r\n}","import React from \"react\"\r\nimport {Button} from \"../Button/ButtonComp\"\r\nimport style from \"./Counter.module.css\"\r\n\r\ntype CounterType = {\r\n    value: number\r\n    increment: () => void\r\n    reset: () => void\r\n    error: boolean\r\n    maxValue: number\r\n    initValue: number\r\n    setIsCounter:()=>void\r\n}\r\n\r\nexport const Counter: React.FC<CounterType> = ({\r\n                                                   value, initValue, increment,\r\n                                                   maxValue, reset, error,\r\n                                                   setIsCounter\r\n                                               }) => {\r\n\r\n    const styles = () => `${value === maxValue ? style.counter_maxValue : \"\"} ${style.counter_display}`\r\n\r\n    return (\r\n        <div className={style.counter_content}>\r\n            <div className={styles()}>\r\n                COUNT: {value}\r\n            </div>\r\n            {error && <div className={style.counter_error}>Max Value</div>}\r\n            <div className={style.counter_buttons}>\r\n                <Button className={style.counter_buttonInc}\r\n                        callback={increment}\r\n                        disabled={error}> Inc </Button>\r\n                <Button className={style.counter_buttonRes}\r\n                        callback={reset}\r\n                        disabled={value === initValue}> Res </Button>\r\n                <Button className={style.counter_buttonSet}\r\n                        callback={setIsCounter}> Set </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {DetailedHTMLProps, FormEvent, InputHTMLAttributes} from \"react\"\r\nimport style from \"./InputComp.module.css\"\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype InputTextPropsType = DefaultInputPropsType & {\r\n    errorText?: string\r\n    error: boolean\r\n    label?: string\r\n    inputValue: number\r\n    setValue: (e: FormEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const Input: React.FC<InputTextPropsType> = (\r\n    {\r\n        type, error,\r\n        label, className,\r\n        value, inputValue,\r\n        setValue,errorText,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n\r\n    const finalInputClassName = `${error ? style.errorInput : \"\"} ${style.Input} ${className}`\r\n\r\n    const onInputHandler = (e: FormEvent<HTMLInputElement>) => {\r\n        setValue(e)\r\n    }\r\n\r\n    return (\r\n\r\n        <label>\r\n            <div className={style.label}>{label}</div>\r\n            <input\r\n                value={inputValue}\r\n                type={type}\r\n                min={-1}\r\n                max={20}\r\n                onInput={onInputHandler}\r\n                className={finalInputClassName}\r\n                {...restProps}\r\n            />\r\n            {error && <span className={style.error}>{errorText}</span>}\r\n        </label>\r\n    )\r\n}\r\n\r\n\r\n","import React, {FormEvent} from \"react\"\r\nimport style from \"./SetCounter.module.css\"\r\nimport {Button} from \"../Button/ButtonComp\"\r\nimport {Input} from \"../Input/InputComp\"\r\nimport {ErrTypes} from \"../../App\"\r\n\r\ntype SetCounterPropsType = {\r\n    setIsCounter: () => void\r\n    maxVal: number\r\n    initVal: number\r\n    setInitVal: (val: string) => void\r\n    setMaxVal: (val: string) => void\r\n    disable: boolean\r\n    setInitHandler: (e: FormEvent<HTMLInputElement>) => void\r\n    setMaxHandler: (e: FormEvent<HTMLInputElement>) => void\r\n    error: string\r\n    errorCode: ErrTypes\r\n}\r\n\r\nexport const SetCounter: React.FC<SetCounterPropsType> = ({\r\n                                                              setIsCounter,\r\n                                                              initVal,\r\n                                                              maxVal, disable,\r\n                                                              setMaxHandler, setInitHandler,error,errorCode\r\n                                                          }) => {\r\n\r\n    return (\r\n\r\n        <div className={style.setCounter_content}>\r\n            <div className={style.setCounter_inputs}>\r\n                <Input label={\"start value\"}\r\n                       className={style.setCounter_input}\r\n                       type={\"number\"}\r\n                       inputValue={initVal}\r\n                       setValue={setInitHandler}\r\n                       errorText={error}\r\n                       error={errorCode === \"INIT\"}\r\n\r\n                />\r\n                <Input label={\"max value\"}\r\n                       className={style.setCounter_input}\r\n                       type={\"number\"}\r\n                       inputValue={maxVal}\r\n                       setValue={setMaxHandler}\r\n                       errorText={error}\r\n                       error={errorCode === \"MAX\"}\r\n\r\n                />\r\n            </div>\r\n            <Button\r\n                callback={setIsCounter}\r\n                className={style.setCounter_button}\r\n                disabled={disable}\r\n            >\r\n                Set\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import React, {FormEvent, useEffect, useState} from \"react\"\r\nimport \"./App.css\"\r\nimport {Counter} from \"./Components/Counter/Counter\"\r\nimport {SetCounter} from \"./Components/SetCounter/SetCounter\"\r\n\r\n\r\nexport type ErrTypes = \"MAX\" | \"INIT\" | \"\"\r\n\r\nfunction App() {\r\n    let [MaxValue, setMaxValue] = useState(5)\r\n    let [InitValue, setInitValue] = useState(0)\r\n\r\n    let [counterValue, setCounterValue] = useState<number>(InitValue)\r\n\r\n    let [isCounter, setIsCounter] = useState<boolean>(true)\r\n\r\n    let [error, setError] = useState<string>(\"\")\r\n    let [errorCode, setErrorCode] = useState<ErrTypes>(\"\")\r\n\r\n    useEffect(() => {\r\n        let errMessage = \"\"\r\n        let errCode: ErrTypes = \"\"\r\n\r\n        if (InitValue < 0) {\r\n            errMessage = \"start value can't be less than 0\"\r\n            errCode = \"INIT\"\r\n        }\r\n        setError(errMessage)\r\n        setErrorCode(errCode)\r\n        if (MaxValue < InitValue) {\r\n            errMessage = \"max value can't be less then start value\"\r\n            errCode = \"MAX\"\r\n        }\r\n        setError(errMessage)\r\n        setErrorCode(errCode)\r\n        if (MaxValue === InitValue) {\r\n            errMessage = \"max value can't be equal to start value\"\r\n            errCode = \"MAX\"\r\n        }\r\n        setError(errMessage)\r\n        setErrorCode(errCode)\r\n\r\n    }, [MaxValue, InitValue])\r\n\r\n    useEffect(() => {\r\n        setCounterValue(InitValue)\r\n    }, [InitValue])\r\n\r\n    useEffect(() => {\r\n        const max = localStorage.getItem(\"max\") || 5\r\n        const init = localStorage.getItem(\"init\") || 0\r\n        if (max) {\r\n            setMaxValue(+max)\r\n        }\r\n        if (init) {\r\n            setInitValue(+init)\r\n        }\r\n    }, [])\r\n\r\n    const incCounterValue = () => {\r\n        setCounterValue(counterValue + 1)\r\n    }\r\n\r\n    const resCounterValue = () => {\r\n        setCounterValue(InitValue)\r\n    }\r\n\r\n    const switchButtonHandler = () => {\r\n        setIsCounter(!isCounter)\r\n    }\r\n\r\n    const setMaxVal = (val: string) => {\r\n        localStorage.setItem(\"max\", val)\r\n    }\r\n\r\n    const setInitVal = (val: string) => {\r\n        localStorage.setItem(\"init\", val)\r\n    }\r\n\r\n    const setInitHandler = (e: FormEvent<HTMLInputElement>) => {\r\n        setInitValue(InitValue = +e.currentTarget.value)\r\n        setInitVal(InitValue.toString())\r\n    }\r\n    const setMaxHandler = (e: FormEvent<HTMLInputElement>) => {\r\n        setMaxValue(MaxValue = +e.currentTarget.value)\r\n        setMaxVal(MaxValue.toString())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {isCounter\r\n                ? <Counter\r\n                    value={counterValue}\r\n                    increment={incCounterValue}\r\n                    reset={resCounterValue}\r\n                    error={counterValue >= MaxValue}\r\n                    maxValue={MaxValue}\r\n                    initValue={InitValue}\r\n                    setIsCounter={switchButtonHandler}\r\n                />\r\n                : <SetCounter\r\n                    setIsCounter={switchButtonHandler}\r\n                    maxVal={MaxValue}\r\n                    initVal={InitValue}\r\n                    setMaxVal={setMaxVal}\r\n                    setInitVal={setInitVal}\r\n                    disable={!!error}\r\n                    setInitHandler={setInitHandler}\r\n                    setMaxHandler={setMaxHandler}\r\n                    error={error}\r\n                    errorCode={errorCode}\r\n                />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}